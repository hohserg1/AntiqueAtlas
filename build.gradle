apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
    }
}
buildscript {
    repositories {
        jcenter()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.27'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


group = "hunternif.mc.atlas"
archivesBaseName = "antiqueatlas"

ext.mod_version = "$version_major.$version_minor.$version_patch"
version = "$mc_version-$mod_version"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            property '--usename', 'hohserg'

            mods {
                antiqueatlas {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    testImplementation "junit:junit:4.+"
}

/*
processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", "$mc_version"

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': "$mc_version"
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
*/

jar {
    manifest {
        attributes([
                "Specification-Title"        : "coprize",
                "Specification-Vendor"       : "coprizesareus",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${version}",
                "Implementation-Vendor"      : "coprizesareus",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

                'FMLCorePlugin'              : 'hohserg.co.prize.hooklib.example.ExampleHookLoader',
                'FMLCorePluginContainsFMLMod': 'true',
                'Created-By'                 : '1.7.0 (Oracle Corporation)',

                'FMLAT'                      : 'coprize_at.cfg'
        ])
    }
}

jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

tasks.build.dependsOn('sourceJar', 'deobfJar')

artifacts {
    archives deobfJar
    archives sourceJar
}